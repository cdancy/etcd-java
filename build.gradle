buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'checkstyle'

apply from: "$rootDir/gradle/additional-artifacts.gradle"
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/documentation.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/release.gradle"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'io.atomix.copycat:copycat-server:1.1.4'
    compile 'io.atomix.catalyst:catalyst-local:1.1.1'
    compile 'co.cask.http:netty-http:0.16.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.google.guava:guava:19.0'
    compile 'javax.inject:javax.inject:1'
    compile 'org.reflections:reflections:0.9.10'
    compile 'ch.qos.logback:logback-classic:1.1.7'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.1.0'
}

ext.compatibilityVersion = '1.8'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

jar {
    manifest {
        attributes 'Implementation-Title': 'etcd-java',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}


checkstyle {
    toolVersion = "6.13"
}


tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:-options"]
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }

}

task mockTest(type: Test) {
    useTestNG()
    include "**/*MockTest.class"
}

task integTest(type: Test, dependsOn: ['mockTest']) {
    useTestNG()
    include "**/**LiveTest.class"
    doFirst {
        String runtimeURL = bootstrapDocker ? "http://${getLocalHost()}:2379" : "${testEtcdEndpoint}"
        systemProperties = ["test.etcd.endpoint" : runtimeURL]
    }
}